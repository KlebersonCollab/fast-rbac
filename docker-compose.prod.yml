version: '3.8'

services:
  # PostgreSQL Database - Production
  postgres:
    image: postgres:15-alpine
    container_name: rbac-postgres-prod
    environment:
      POSTGRES_DB: rbac_prod
      POSTGRES_USER: ${POSTGRES_USER:-rbac_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-rbac_user} -d rbac_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rbac-network

  # Redis Cache - Production
  redis:
    image: redis:7-alpine
    container_name: rbac-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rbac-network

  # FastAPI Backend - Production
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rbac-backend-prod
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-rbac_user}:${POSTGRES_PASSWORD}@postgres:5432/rbac_prod
      - REDIS_URL=redis://redis:6379/0
      - REDIS_ENABLED=true
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=false
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-https://yourdomain.com}
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    networks:
      - rbac-network

  # Streamlit Frontend - Production
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: rbac-frontend-prod
    environment:
      - API_BASE_URL=http://backend:8000
      - ENVIRONMENT=production
    ports:
      - "8501:8501"
    depends_on:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.125'
    networks:
      - rbac-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: rbac-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - rbac-network

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: rbac-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - rbac-network

volumes:
  postgres_data_prod:
  redis_data_prod:
  prometheus_data:

networks:
  rbac-network:
    driver: bridge 